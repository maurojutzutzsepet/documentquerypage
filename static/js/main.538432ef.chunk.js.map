{"version":3,"sources":["components/Listen.js","components/AppNav.js","App.js","serviceWorker.js","index.js"],"names":["Listen","state","persons","axios","get","then","res","data","setState","className","this","map","person","nombreDocumento","codigoEmpresa","numeroPlanila","nitEmpresa","codigoDepartamento","nombreDepartamento","numeroBoleta","fechaPago","codigoColaborador","nombreColaborador","nitColaborador","Button","variant","React","Component","AppNav","AppBar","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAGqBA,E,2MAEnBC,MAAQ,CACNC,QAAS,I,mFAGU,IAAD,OAClBC,IAAMC,IAAN,6HACGC,KAAK,SAAAC,GACJ,IAAMJ,EAAUI,EAAIC,KACpB,EAAKC,SAAS,CAAEN,gB,+BAQpB,OACE,yBAAKO,UAAW,SAEhB,2BAAOA,UAAU,YAEf,wBAAIA,UAAU,YAEZ,4BAAI,gDACJ,4BAAI,0CACJ,4BAAI,4CACJ,4BAAI,2CACJ,4BAAI,+CACJ,4BAAI,mDACJ,4BAAI,0CACJ,4BAAI,0CACJ,4BAAI,8CACJ,4BAAI,kDACJ,4BAAI,gDAIJC,KAAKT,MAAMC,QAAQS,IAAI,SAAAC,GAAM,OAC/B,wBAAIH,UAAU,YACZ,iCAAQG,EAAOC,gBAAf,KACA,iCAAQD,EAAOE,cAAf,KACA,iCAAQF,EAAOG,cAAf,KACA,iCAAQH,EAAOI,WAAf,KACA,iCAAQJ,EAAOK,mBAAf,KACA,iCAAQL,EAAOM,mBAAf,KACA,iCAAQN,EAAOO,aAAf,KACA,iCAAQP,EAAOQ,UAAf,KACA,iCAAQR,EAAOS,kBAAf,KACA,iCAAQT,EAAOU,kBAAf,KACA,iCAAQV,EAAOW,eAAf,SAMN,kBAACC,EAAA,EAAD,CAAQC,QAAQ,aAAhB,0B,GAzDgCC,IAAMC,W,gBCCrBC,E,iLAEb,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQpB,UAAU,SACd,kBAAC,IAAD,KACW,qD,GANKkB,aCYrBG,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.538432ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button'\r\nexport default class Listen extends React.Component {\r\n  \r\n  state = {\r\n    persons: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(`https://cosmo-rest-api-get.azurewebsites.net/api/documentos?code=xfELrJfMVpCYSxxzqQVKbRYYw5N0LQs6rerg7Bjx7dgwhSsVp3PqeQ==`)\r\n      .then(res => {\r\n        const persons = res.data;\r\n        this.setState({ persons });\r\n      })\r\n}\r\n      \r\n\r\n  render() {\r\n    \r\n\r\n    return (\r\n      <div className =\"marco\">\r\n        \r\n      <table className='students'>\r\n        \r\n        <tr className=\"students\">\r\n          \r\n          <td><b>NOMBRE DOCUMENTO</b></td>\r\n          <td><b>ID EMPRESA</b></td>\r\n          <td><b>No. PLANILLA</b></td>\r\n          <td><b>NIT EMPRESA</b></td>\r\n          <td><b>ID DEPARTAMENTO</b></td>\r\n          <td><b>NOMBRE DEPARTAMENTO</b></td>\r\n          <td><b>No. BOLETA</b></td>\r\n          <td><b>FECHA PAGO</b></td>\r\n          <td><b>ID COLABORADOR</b></td>\r\n          <td><b>NOMBRE COLABORADOR</b></td>\r\n          <td><b>NIT COLABORADOR</b></td>\r\n         </tr> \r\n        \r\n        { \r\n          this.state.persons.map(person => \r\n        <tr className=\"students\">\r\n          <td>  { person.nombreDocumento} </td>\r\n          <td>  { person.codigoEmpresa} </td>\r\n          <td>  { person.numeroPlanila} </td>\r\n          <td>  { person.nitEmpresa} </td>\r\n          <td>  { person.codigoDepartamento} </td>\r\n          <td>  { person.nombreDepartamento} </td>\r\n          <td>  { person.numeroBoleta} </td>\r\n          <td>  { person.fechaPago} </td>\r\n          <td>  { person.codigoColaborador} </td>\r\n          <td>  { person.nombreColaborador} </td>\r\n          <td>  { person.nitColaborador} </td>\r\n          </tr>)\r\n          }\r\n      \r\n    </table>\r\n\r\n    <Button variant=\"contained\">\r\n      Descargar Archivo\r\n    </Button>\r\n    \r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n/*\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n}));\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nexport default function SimpleTable() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table}>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Dessert (100g serving)</TableCell>\r\n            <TableCell align=\"right\">Calories</TableCell>\r\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map(row => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.calories}</TableCell>\r\n              <TableCell align=\"right\">{row.fat}</TableCell>\r\n              <TableCell align=\"right\">{row.carbs}</TableCell>\r\n              <TableCell align=\"right\">{row.protein}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  );\r\n}\r\n*/","import React,{Component} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\n\r\nexport default class AppNav extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <AppBar className=\"fixed\">\r\n                    <ToolBar>\r\n                               <h2>Document Query</h2>\r\n                    </ToolBar>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Listen from './components/Listen';\nimport AppNav from './components/AppNav';\n\n\n\nfunction App() {\n  return (\n    <div >\n      <AppNav />\n      <Listen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}